[
  {
    "unit_test_code": "import pytest\nfrom testing import login\n\ndef test_login_with_valid_credentials():\n    assert login('admin', 'password') == 'Login successful!'\n\ndef test_login_with_empty_username():\n    assert login('', 'password') == 'Invalid username or password.'\n\ndef test_login_with_invalid_username():\n    assert login('invalidUser', 'password') == 'Invalid username or password.'\n\ndef test_login_with_special_characters():\n    assert login('user!@#$', 'pass!@#$') == 'Invalid username or password.'\n\ndef test_login_with_case_sensitive_username():\n    assert login('Admin', 'password') == 'Invalid username or password.'",
    "test_library": "pytest",
    "name_unit_test_file": "test_testing.py",
    "category": "Functional Cases",
    "is_regression": false,
    "path": "testing.py",
    "unit_test_id": "dee3d381-8c29-4faf-adc4-b3b59e06f709",
    "id": "2d720b9a-e021-433d-9896-d51092722356"
  },
  {
    "unit_test_code": "import pytest\nfrom testing import sum_two_values\n\ndef test_sum_with_zero():\n    assert sum_two_values(0, 5) == 5",
    "test_library": "pytest",
    "name_unit_test_file": "test_testing.py",
    "category": "Edge Cases > Boundary value analysis",
    "is_regression": false,
    "path": "testing.py",
    "unit_test_id": "d95512cc-9feb-49f3-b294-44711f265d7c",
    "id": "d555e4df-7769-4388-b577-81dbfe987fb2"
  },
  {
    "unit_test_code": "import pytest\nfrom testing import sum_two_values\n\ndef test_sum_with_large_numbers():\n    assert sum_two_values(1e+20, 1e+20) == 2e+20",
    "test_library": "pytest",
    "name_unit_test_file": "test_testing.py",
    "category": "Edge Cases > Extreme input scenarios",
    "is_regression": false,
    "path": "testing.py",
    "unit_test_id": "4602855e-40b0-4e0e-a938-2706160e082f",
    "id": "282d1b4d-26da-49d8-adda-b921acc8a5d6"
  },
  {
    "unit_test_code": "import pytest\nfrom testing import sum_two_values\n\ndef test_sum_positive_numbers():\n    assert sum_two_values(5, 10) == 15",
    "test_library": "pytest",
    "name_unit_test_file": "test_testing.py",
    "category": "Functional Cases > Core functionality testing",
    "is_regression": false,
    "path": "testing.py",
    "unit_test_id": "587baa2e-fb60-499f-aa8c-db5ea8c89553",
    "id": "3cc81797-e609-4dfd-a941-ca1f6688373e"
  },
  {
    "unit_test_code": "import pytest\nfrom testing import sum_two_values\nimport pytest\n\ndef test_sum_with_string_input():\n    with pytest.raises(TypeError):\n        sum_two_values('5', 3)",
    "test_library": "pytest",
    "name_unit_test_file": "test_testing.py",
    "category": "Functional Cases > Input validation testing",
    "is_regression": false,
    "path": "testing.py",
    "unit_test_id": "26c95e7f-2fb3-4d06-9ea9-e898b8438f68",
    "id": "57291988-7055-4b4d-93c4-67bb6bba8496"
  },
  {
    "unit_test_code": "import pytest\nfrom testing import generate_even_numbers\n\ndef test_generate_even_numbers_start_equals_end():\n    assert generate_even_numbers(2, 2) == [2]  # Single even number\n\ndef test_generate_even_numbers_negative_range():\n    assert generate_even_numbers(-4, 0) == [-4, -2, 0]  # Even numbers in a negative range\n\ndef test_generate_even_numbers_high_values():\n    assert generate_even_numbers(1000000, 1000004) == [1000000, 1000002, 1000004]  # High value range\n\ndef test_generate_even_numbers_standard_range():\n    assert generate_even_numbers(1, 10) == [2, 4, 6, 8, 10]  # Standard even number range\n\ndef test_generate_even_numbers_no_even_number():\n    assert generate_even_numbers(1, 1) == []  # Range with no even numbers\n\ndef test_generate_even_numbers_invalid_input():\n    with pytest.raises(TypeError):\n        generate_even_numbers('a', 'b')  # Invalid input raises TypeError",
    "test_library": "pytest",
    "name_unit_test_file": "test_testing.py",
    "category": "Unit Tests",
    "is_regression": false,
    "path": "testing.py",
    "unit_test_id": "f58870be-c0ad-4c95-9168-9532683f930a",
    "id": "5b63cb02-9aa5-4e35-a181-4e80288196fb"
  },
  {
    "unit_test_code": "import pytest\nfrom testing import generate_odd_numbers\n\ndef test_generate_odd_numbers_with_start_end_equal():\n    result = generate_odd_numbers(3, 3)\n    assert result == [3]\n\ndef test_generate_odd_numbers_with_large_range():\n    result = generate_odd_numbers(1, 10000)\n    expected_output = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]\n    assert result == expected_output\n\ndef test_generate_odd_numbers_happy_path():\n    result = generate_odd_numbers(1, 5)\n    assert result == [1, 3, 5]\n\ndef test_generate_odd_numbers_with_negative_range():\n    result = generate_odd_numbers(5, 1)\n    assert result == []\n\ndef test_generate_odd_numbers_with_zero_range():\n    result = generate_odd_numbers(0, 0)\n    assert result == []",
    "test_library": "pytest",
    "name_unit_test_file": "test_testing.py",
    "category": "Unit Tests",
    "is_regression": false,
    "path": "testing.py",
    "unit_test_id": "b3144534-a8bb-448f-a8eb-dd449f933151",
    "id": "37adccd2-55a2-4e1a-9031-0f32ca6d0043"
  }
]
