{
    "repo_url": "https://github.com/fouadmahmoud281/fouadmahmoud281_obelion_20241229152103",
    "summary": "Repository: fouadmahmoud281/fouadmahmoud281_obelion_20241229152103\nFiles analyzed: 77\n\nEstimated tokens: 22.5k",
    "frameworks_and_languages": "{\n    \"languages\": [\"JavaScript\", \"Node.js\"],\n    \"frameworks\": [\"Express.js\"]\n}\n{\n    \"languages\": [\"JavaScript\"],\n    \"frameworks\": [\"React\"]\n}",
    "modules_need_testing": "[\n    {\n        \"name\": \"googleLogin\",\n        \"type\": \"function\",\n        \"code\": \"exports.googleLogin = async (req, res) => {\\n  const { tokenId } = req.body;\\n\\n  try {\\n    const { email, name } = {};\\n\\n    let user = await User.findOne({ where: { email } });\\n\\n    if (!user) {\\n      user = await User.create({ email, name });\\n    }\\n\\n    const token = jwt.sign({ id: user.id }, 'secret', { expiresIn: '1h' });\\n\\n    res.status(200).json({ token });\\n  } catch (error) {\\n    res.status(500).json({ error: 'Server error' });\\n  }\\n};\"\n    },\n    {\n        \"name\": \"facebookLogin\",\n        \"type\": \"function\",\n        \"code\": \"exports.facebookLogin = async (req, res) => {\\n  const { accessToken, userID } = req.body;\\n\\n  try {\\n    const { email, name } = {};\\n\\n    let user = await User.findOne({ where: { email } });\\n\\n    if (!user) {\\n      user = await User.create({ email, name });\\n    }\\n\\n    const token = jwt.sign({ id: user.id }, 'secret', { expiresIn: '1h' });\\n\\n    res.status(200).json({ token });\\n  } catch (error) {\\n    res.status(500).json({ error: 'Server error' });\\n  }\\n};\"\n    },\n    {\n        \"name\": \"emailLogin\",\n        \"type\": \"function\",\n        \"code\": \"exports.emailLogin = async (req, res) => {\\n  const { email, password } = req.body;\\n\\n  try {\\n    const user = await User.findOne({ where: { email } });\\n\\n    if (!user) {\\n      return res.status(400).json({ error: 'Invalid email or password' });\\n    }\\n\\n    const isMatch = await bcrypt.compare(password, user.password);\\n\\n    if (!isMatch) {\\n      return res.status(400).json({ error: 'Invalid email or password' });\\n    }\\n\\n    const token = jwt.sign({ id: user.id }, 'secret', { expiresIn: '1h' });\\n\\n    res.status(200).json({ token });\\n  } catch (error) {\\n    res.status(500).json({ error: 'Server error' });\\n  }\\n};\"\n    },\n    {\n        \"name\": \"register\",\n        \"type\": \"function\",\n        \"code\": \"exports.register = async (req, res) => {\\n  const { email, password, phone } = req.body;\\n\\n  try {\\n    const existingUser = await User.findOne({ where: { email } });\\n\\n    if (existingUser) {\\n      return res.status(400).json({ error: 'Email already registered' });\\n    }\\n\\n    const hashedPassword = await bcrypt.hash(password, 10);\\n\\n    const user = await User.create({\\n      email,\\n      password: hashedPassword,\\n      phone\\n    });\\n\\n    const token = jwt.sign({ id: user.id }, 'secret', { expiresIn: '1h' });\\n\\n    res.status(201).json({ token });\\n  } catch (error) {\\n    res.status(500).json({ error: 'Server error' });\\n  }\\n};\"\n    },\n    {\n        \"name\": \"createPayment\",\n        \"type\": \"function\",\n        \"code\": \"const createPayment = async (req, res) => {\\n  try {\\n    const { cardNumber, expiryDate, cvv, nameOnCard } = req.body;\\n    const newPayment = await Payment.create({ cardNumber, expiryDate, cvv, nameOnCard });\\n    res.status(201).json({ message: 'Payment created successfully', payment: newPayment });\\n  } catch (error) {\\n    res.status(500).json({ message: 'Error creating payment', error: error.message });\\n  }\\n};\"\n    },\n    {\n        \"name\": \"getPaymentById\",\n        \"type\": \"function\",\n        \"code\": \"const getPaymentById = async (req, res) => {\\n  try {\\n    const paymentId = req.params.id;\\n    const payment = await Payment.findByPk(paymentId);\\n    if (payment) {\\n      res.status(200).json(payment);\\n    } else {\\n      res.status(404).json({ message: 'Payment not found' });\\n    }\\n  } catch (error) {\\n    res.status(500).json({ message: 'Error retrieving payment', error: error.message });\\n  }\\n};\"\n    },\n    {\n        \"name\": \"updatePayment\",\n        \"type\": \"function\",\n        \"code\": \"const updatePayment = async (req, res) => {\\n  try {\\n    const paymentId = req.params.id;\\n    const { cardNumber, expiryDate, cvv, nameOnCard } = req.body;\\n    const payment = await Payment.findByPk(paymentId);\\n    if (payment) {\\n      await payment.update({ cardNumber, expiryDate, cvv, nameOnCard });\\n      res.status(200).json({ message: 'Payment updated successfully', payment });\\n    } else {\\n      res.status(404).json({ message: 'Payment not found' });\\n    }\\n  } catch (error) {\\n\n[\n    {\n        \"name\": \"handleEmailLogin\",\n        \"type\": \"function\",\n        \"code\": \"const handleEmailLogin = async () => {\\n  try {\\n    const res = await axios.post('https://shopping-websiteapp-backend.cloud-stacks.com/api/login/email', {\\n      email,\\n      password\\n    });\\n    localStorage.setItem('token', res.data.token);\\n    window.location.href = '/dashboard';\\n  } catch (error) {\\n    console.error('Email login failed', error.response.data.error);\\n  }\\n};\"\n    },\n    {\n        \"name\": \"handlePayment\",\n        \"type\": \"function\",\n        \"code\": \"const handlePayment = async () => {\\n  try {\\n    const encryptedDataResponse = await axios.post('https://shopping-websiteapp-backend.cloud-stacks.com/api/encrypt', {\\n      cardNumber,\\n      expiryDate,\\n      cvv,\\n      nameOnCard\\n    }, {\\n      headers: {\\n        'Content-Type': 'application/json'\\n      }\\n    });\\n\\n    const encryptedData = encryptedDataResponse.data;\\n\\n    const isApproved = await verifyPaymentApproval(approvalCode);\\n\\n    if (isApproved) {\\n      await processPayment(encryptedData);\\n    } else {\\n      alert('Payment could not be verified.');\\n    }\\n  } catch (error) {\\n    alert('Error processing payment');\\n  }\\n};\"\n    },\n    {\n        \"name\": \"verifyPaymentApproval\",\n        \"type\": \"function\",\n        \"code\": \"const verifyPaymentApproval = async (code) => {\\n  try {\\n    const response = await axios.post('https://shopping-websiteapp-backend.cloud-stacks.com/api/verify', {\\n      approvalCode: code\\n    }, {\\n      headers: {\\n        'Content-Type': 'application/json'\\n      }\\n    });\\n    return response.data.isApproved;\\n  } catch (error) {\\n    alert('Error verifying payment approval');\\n    return false;\\n  }\\n};\"\n    },\n    {\n        \"name\": \"processPayment\",\n        \"type\": \"function\",\n        \"code\": \"const processPayment = async (data) => {\\n  try {\\n    await axios.post('https://shopping-websiteapp-backend.cloud-stacks.com/api/payments', data, {\\n      headers: {\\n        'Content-Type': 'application/json'\\n      }\\n    });\\n    alert('Payment processed successfully');\\n  } catch (error) {\\n    alert('Error processing payment');\\n  }\\n};\"\n    },\n    {\n        \"name\": \"fetchResults\",\n        \"type\": \"function\",\n        \"code\": \"const fetchResults = async (query) => {\\n  try {\\n    const response = await fetch(`https://shopping-websiteapp-backend.cloud-stacks.com/api/search?query=${query}`, {\\n      method: 'GET',\\n      headers: {\\n        'Content-Type': 'application/json'\\n      }\\n    });\\n    if (!response.ok) {\\n      throw new Error('Failed to fetch');\\n    }\\n    const data = await response.json();\\n    setResults(data.results);\\n    setSuggestions(data.suggestions);\\n  } catch (error) {\\n    console.error('Error fetching search results:', error);\\n  }\\n};\"\n    },\n    {\n        \"name\": \"handleSuggestionClick\",\n        \"type\": \"function\",\n        \"code\": \"const handleSuggestionClick = (suggestion) => {\\n  setQuery(suggestion);\\n  fetchResults(suggestion);\\n};\"\n    },\n    {\n        \"name\": \"handleInputChange\",\n        \"type\": \"function\",\n        \"code\": \"const handleInputChange = (e) => {\\n  const { name, value } = e.target;\\n  setPaymentInfo({ ...paymentInfo, [name]: value });\\n};\"\n    },\n    {\n        \"name\": \"handleSearch\",\n        \"type\": \"function\",\n        \"code\": \"const handleSearch = debounce(async (searchQuery) => {\\n  if (searchQuery.trim() === '') {\\n    setProducts([]);\\n    setSuggestions('');\\n    return;\\n  }\\n\\n  try {\\n    const response = await fetch('https://shopping-websiteapp-backend.cloud-stacks.com/api/search-products', {\\n      method: 'GET',\\n      headers: {\\n        'Content-Type': 'application/json'\\n      },\\n      params: { query: searchQuery }\\n    });\\n\\n    if (response.ok) {\\n      const data = await response.json();\\n      setProducts(data.results);\\n      setSuggestions(data.suggestions[0] || '');\\n    } else {\\n      setProducts([]);\\n      setSuggestions('');\\n    }\\n  } catch (error) {\\n    setProducts([]);\\n    setSuggestions('');\\n  }\\n}, 300);\"\n    }\n]"
}